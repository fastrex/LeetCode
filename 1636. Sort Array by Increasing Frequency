class Solution {
public:
    vector<int> frequencySort(vector<int>& nums) {
        std::map<int, int> sortMap;
        for (int i = 0; i < nums.size(); ++i)
        {
            auto it = sortMap.try_emplace(nums[i], 1);
            if (!it.second)
            {
                ++it.first->second;
            }
        }

        auto cmp = [](const std::pair<int, int>& val1, const std::pair<int, int>& val2)
        {
            return val1.first < val2.first || val1.first == val2.first &&val1.second > val2.second;
        };
        std::set<std::pair<int, int>, decltype(cmp)> sortSet(cmp);

        for (auto& item : sortMap)
        {
            sortSet.emplace(item.second, item.first);
        }
        vector<int> retVal;
        retVal.reserve(nums.size());
        for (auto& item : sortSet)
        {
            for (int i = 0; i < item.first; ++i)
            {
                retVal.push_back(item.second);
            }
        }
        return retVal;
    }
};
