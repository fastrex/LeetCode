class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        std::vector<double> dp(n, 0);
        dp[start_node] = 1.0;
        for (int i = 0; i < n-1; ++i)
        {
            bool needBrake = true;
            for (int j = 0; j < edges.size(); ++j)
            {
                int f = edges[j][0];
                int t = edges[j][1];
                double p = succProb[j];

                if (p * dp[f] > dp[t])
                {
                    dp[t] = p * dp[f];
                    needBrake = false;
                }

                if (p * dp[t] > dp[f])
                {
                    dp[f] = p * dp[t];
                    needBrake = false;
                }
            }
            if (needBrake)
            {
                break;
            }
        }
        return dp[end_node];
    }
};
