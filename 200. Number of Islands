class Solution {
    int columnCount = 0;
public:
    int numIslands(vector<vector<char>>& grid) {
        
        int retVal = 0;
        for (int i = 0; i < grid.size(); i++)
        {
            auto& row = grid[i];
            for (int j = 0; j < row.size(); j++)
            {
                if (row[j] == '1')
                {
                    check(grid, i, j);
                    retVal++;
                }
            }
        }
        return retVal;
    }

   void check(vector<vector<char>>& grid, const int& i, const int& j)
   {
        if (i < 0 || i > grid.size() - 1 || j < 0 || j > grid[0].size() - 1)
            return;

        if (grid[i][j] == '1')
        {
            grid[i][j] = '2';
        }
        else
        {
            return;
        }
        check(grid, i - 1, j);
        check(grid, i, j - 1);
        check(grid, i + 1, j);
        check(grid, i, j + 1);
   }
};



// 14.09.2024

class Solution {
    vector<vector<char>>* grid;
    int maxx;
    int maxy;

    int func (int x, int y)
    {
        if (0 <= x && x < maxx && 0 <= y && y < maxy)
        {
            if ((*grid)[x][y] == '1')
            {
                (*grid)[x][y] = '2';
                func(x + 1, y);
                func(x, y + 1);
                func(x - 1, y);
                func(x, y - 1);
                return 1;
            }
        }
        return 0;
    }

public:
    int numIslands(vector<vector<char>>& grid) {
        this->grid = &grid;
        maxx = grid.size();
        maxy = grid.front().size();
        int sum = 0;
        for (int i = 0; i < maxx; ++i)
        {
            for (int j = 0; j < maxy; ++j)
            {
                sum += func(i, j);
            }
        }
        return sum;
    }
};
