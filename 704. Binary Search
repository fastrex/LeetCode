class Solution {
public:
    int search(vector<int>& nums, int target) {
        if (nums.empty())
            return -1;
        int lo = 0, hi = (int)nums.size() - 1, mid;
        while (lo < hi)
        {
            mid = lo + (hi - lo) / 2;
            if  (nums[mid] < target)
            {
                lo = mid + 1;
            }
            else
            {
                hi = mid;                
            }
        }
       mid = lo + (hi - lo) / 2;
       return nums[mid] == target ? mid : -1;
    }
};


// 16.09.2024

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int lo = 0;
        int hi = nums.size() - 1;
        do
        {            
            int mid = lo + (hi - lo) / 2;
            if (nums[lo] <= target && target < nums[mid])
            {
                hi = mid;   
                             
            }
            else if (nums[mid] <= target && target <= nums[hi])
            {
                lo = mid;
            }
            else
            {
                return -1;
            }
            if (target == nums[lo])
                return lo;
            if (target == nums[hi])
                return hi;
        }
        while (lo + 1 < hi);
        return -1;
    }
};
