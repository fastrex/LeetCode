class Solution {
public:
    bool isValid(string s) {
        std::stack<char> stack;

        for (int i = 0; i < s.size() ; i++)
        {
            if (s[i] == '(' || s[i] == '[' || s[i] == '{')
            {
                stack.push(s[i]);
            }
            else
            {
                auto& val = stack.top();
                if (!stack.empty() && (s[i] == ')' && stack.top() == '(' || s[i] == ']' && stack.top() == '[' ||s[i] == '}' && stack.top() == '{' ))
                {
                    stack.pop();
                }
                else
                {
                    return false;
                }
            }
        }
        return stack.empty() ? true : false;
    }
};

//10.09.2024

// менее красивое решение

class Solution {
    std::stack<char> st;
    bool check (char c1)
    {
        auto& val = st.top();
        if (val == c1)
        {
            st.pop();
            return true;
        }
        else
        {
            return false;
        }
    }

public:
    bool isValid(string s) {
        
        for (auto& item : s)
        {
            if (item == '(' || item == '[' || item == '{')
            {
                st.push(item);
                continue;
            }
            if (st.empty())
            {
                return false;
            }            
            if (item == ')')
            {
                if (!check('('))                
                {
                    return false;
                }
            }
            else if (item == ']')
            {
                if (!check('['))                
                {
                    return false;
                }
            }
            else
            {
                if (!check('{'))                
                {
                    return false;
                }
            }            
        }
        return st.empty() ? true : false;
    }
};
