class Solution {
public:
    int leastInterval(const std::vector<char>& tasks, int n)
    {

        std::vector<int> mas(26, 0);
        for (auto& item : tasks)
        {
            ++mas[item - 'A'];        
        }

        std::priority_queue<int> pq;
        for (auto& item : mas)
        {
            if (item)
                pq.push(item);
        }

        int time = 0;
        int loop;
        std::vector<int> temp;
        while (!pq.empty())
        {
            temp.clear();
            loop = n + 1;
            while (loop > 0 && !pq.empty())
            {
                auto tv = pq.top();
                pq.pop();
                if (tv > 1)
                {
                    temp.push_back(--tv);
                }
                --loop;
                ++time;
            }

            for (auto& item : temp)
            {
                pq.push(item);
            }

            if (pq.empty())
            {
                break;
            }
            time += loop;
        }
        return time;
    }
};
