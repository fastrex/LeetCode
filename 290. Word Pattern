class Solution {
public:
    bool wordPattern(string pattern, string s) {
        std::unordered_map<char, std::string> mp;
        std::set<std::string> st;
        size_t last_index = 0;
        for (int i = 0; i < pattern.size(); ++i)
        {
            const char& c = pattern[i];
            std::string str;
            for (; last_index < s.size() && s[last_index] != ' '; ++last_index)
            {
                str.push_back(s[last_index]);
            }
            ++last_index;
            if (mp[c].empty())
            {
                if (st.find(str) != st.end())
                {
                    return false;
                }
                mp[c] = str;
                st.emplace(std::move(str));
            }
            else if (mp[c] != str)
            {
                return false;
            }
        }
        return last_index == s.size() + 1 ? true : false;
    }
};
