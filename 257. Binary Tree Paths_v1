/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {


    void calc(vector<string>& retVal, string& curMas, TreeNode* root)
    {
        if (root)
        {
            if (!curMas.empty())
            {
                curMas += "->";
            }
            curMas += std::to_string(root->val);
            if (!root->left && !root->right)
            {
                retVal.push_back(curMas);               
            }
            else
            {
                calc(retVal, curMas, root->left);
                calc(retVal, curMas, root->right);
            }        
            // delete dights   
            while (!curMas.empty() && curMas.back() != '>')
            {
                curMas.pop_back();
            }
            // delete arrow
            if (curMas.size() > 1)
            {
                curMas.pop_back();
                curMas.pop_back();
            }
        }
    }

public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> retVal;
        string curMas;
        calc(retVal, curMas, root);
        return retVal;
    }
};
