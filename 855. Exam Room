class ExamRoom {
    int n=0;
    std::set<int> st;

public:
    ExamRoom(int n) {
        this->n = n - 1;
    }

    int seat() {
       
        if (st.empty())
        {
            st.insert(0);
            return 0;
        }
        int dist = -1;
        int tempDist = 0;
        auto it1 = st.begin();
        auto it2 = it1;
        ++it2;
        int newVal = 0;

        for (; it2 != st.end(); ++it1, ++it2)
        {   
            tempDist = *it2 - *it1;
            if (( tempDist) / 2 > dist  || dist == -1)
            {
                dist = tempDist / 2;
                newVal = *it1 + dist;
            }
        }
       
        if (*st.begin() >= dist)
        {
            newVal = 0;
            dist = *st.begin();
        }
        if (n - *st.rbegin() > dist || !dist)
        {
            newVal = n;
        }
        st.insert(newVal);
        return newVal;
    }

    void leave(int p) {
        st.erase(p);
    }
};

/////////////////////////////////////////
class ExamRoom {
    int n=0;
    std::set<int> st;

public:
    ExamRoom(int n) {
        this->n = n - 1;
    }

    int seat() {
       
        if (st.empty())
        {
            st.insert(0);
            return 0;
        }
        int dist = -1;
        int tempDist = 0;
        auto it1 = st.begin();
        auto it2 = it1;
        ++it2;
        int newVal = 0;

        for (; it2 != st.end(); ++it1, ++it2)
        {   
            tempDist = *it2 - *it1;
            if (( tempDist) / 2 > dist  || dist == -1)
            {
                dist = tempDist / 2;
                newVal = *it1 + dist;
            }
        }
       
        if (*st.begin() >= dist)
        {
            newVal = 0;
            dist = *st.begin();
        }
        if (n - *st.rbegin() > dist || !dist)
        {
            newVal = n;
        }
        st.insert(newVal);
        return newVal;
    }

    void leave(int p) {
        st.erase(p);
    }
};
