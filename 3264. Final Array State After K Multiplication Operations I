class Solution {

    struct Comp
    {
        bool operator()(const std::pair<size_t, size_t>& v1, const std::pair<size_t, size_t>& v2) const
        {
            return v1.first < v2.first || (v1.first == v2.first && v1.second < v2.second);
        }
    };

public:
    vector<int> getFinalState(vector<int>& nums, int k, int multiplier) {
        vector<int> retVal(nums.size());        
        std::multiset<std::pair<size_t, size_t>, Comp> sett;
        for (int i = 0; i < nums.size(); ++i)
        {
            sett.insert(std::make_pair(nums[i], i));
        }

        for (int i = 0; i < k; ++i)
        {
            auto val = *sett.begin();
            val.first *= multiplier;
            sett.erase(sett.begin());
            sett.insert(val);
        }

        for (auto&& item : sett)
        {
            retVal[item.second] = item.first;
        }
        return retVal;
    }
};
