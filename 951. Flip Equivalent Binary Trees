/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {   
    bool isEqual(TreeNode* root1, TreeNode* root2)
    {
        if (!root1->left && !root2->left && !root1->right && !root2->right)
        {
            return true;
        }
        else if (root1->left && root2->left && root1->right && root2->right)
        {
            if (root1->left->val == root2->left->val && root1->right->val == root2->right->val)
            {                
                return isEqual(root1->left, root2->left) && isEqual(root1->right, root2->right);
            }
            else if (root1->left->val == root2->right->val && root1->right->val == root2->left->val)
            {                
                return isEqual(root1->left, root2->right) && isEqual(root1->right, root2->left);
            }
        }
        else 
        {
            int sum = (bool)root1->left + (bool)root1->right + (bool)root2->left + (bool)root2->right;
            if (sum % 2)
            {
                return false;
            }
            auto n1 = root1->left ? root1->left : root1->right;
            auto n2 = root2->left ? root2->left: root2->right;
            if (n1->val == n2->val)
            {
                return isEqual(n1, n2);
            }
        }        
        return false;        
    }

public:
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        if (!root1 && !root2)
        {
            return true;
        }
        if ((bool)root1 ^ (bool)root2 || root1->val != root2->val)
        {
            return false;
        }      
        return isEqual(root1, root2);
    }
};
